@page "/login"
@using WheelOfFortune.Client.Services
@using WheelOfFortune.Shared.Model.User
@inject NavigationManager NavigationManager
@inject IAuthService AuthService
@inject ISnackbar Snackbar
@using Extensions
<PageTitle>Войти</PageTitle>
<MudText Typo="Typo.h2" Style="padding-bottom:10px">Войти</MudText>
<EditForm Model=@_authenticateUserDto OnValidSubmit=@HandleLogin>
    <DataAnnotationsValidator />
    <MudCard>
        <MudCardContent>
            <MudTextField Variant="Variant.Outlined" Label="Email" InputType="InputType.Email" @bind-Value="_authenticateUserDto.Email" For=@(() => _authenticateUserDto.Email)></MudTextField>
            <MudTextField Variant="Variant.Outlined" Label="Пароль" InputType="InputType.Password" @bind-Value="_authenticateUserDto.Password" For=@(() => _authenticateUserDto.Password)></MudTextField>

        </MudCardContent>
        <MudCardActions Class="d-flex justify-end">
            <MudButton Variant="Variant.Outlined" OnClick="@(() => NavigationManager.NavigateTo("/registration"))" Color="Color.Primary">Зарегистрироваться</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Style="margin-left:10px">Войти</MudButton>
        </MudCardActions>
    </MudCard>
</EditForm>
@code {
    private AuthenticateUserDto _authenticateUserDto { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _authenticateUserDto = new();
    }

    private async Task HandleLogin()
    {
        var result = await AuthService.Login(_authenticateUserDto);
        if (result)
        {
            Snackbar.Add("Успешная авторизация", Severity.Success);
            NavigationManager.NavigateTo("/", true);

        }
        else
        {
            Snackbar.Add("Не удалось авторизоваться (неправильный логин или email)", Severity.Error);
            
        }
    }
}

@using WheelOfFortune.Client.Services
@using WheelOfFortune.Shared.Model.RealEstate
@using WheelOfFortune.Shared.Model.Record
@using WheelOfFortune.Shared.Model.Rent
@inject IRentService RentService
@inject ISnackbar Snackbar
<MudDialog>
    <DialogContent>
        <MudText Typo=Typo.h6>Заполните сведения об аренде</MudText>
        <MudDateRangePicker @bind-DateRange=_dateRange Required=true></MudDateRangePicker>
        <MudTextField @bind-Value=_createRentDto.ClientEmail InputMode=InputMode.email InputType=InputType.Email Label="Email клиента"/>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick=@(() => MudDialog.Cancel())>Отмена</MudButton>
        <MudButton OnClick=@(() => CreateRent())>Добавить аренду</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public ReadRealEstateDto RealEstateDto { get; set; }
    DateRange _dateRange = new DateRange(DateTime.Now.Date, DateTime.Now.AddDays(5).Date);
    CreateRentDto _createRentDto;
    protected override async Task OnInitializedAsync()
    {
        _createRentDto = new CreateRentDto()
            {
                RealEstateId = RealEstateDto.Id
            };
    }

    private async Task CreateRent()
    {
        _createRentDto.StartRentDate = _dateRange.Start.Value;
        _createRentDto.EndRentDate = _dateRange.End.Value;
        if (await RentService.Add(_createRentDto))
        {
            Snackbar.Add("Аренда успешно создана", Severity.Success);
            MudDialog.Close();
        }
        else
        {
            Snackbar.Add("Проверьте email пользователя. Также возможно, что на данный промежуток времени уже существует аренда", Severity.Error);
            
        }
    }

}
